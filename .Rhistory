crashes_cached <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d_%H:%M:%S"))
url <-   "https://data.cityofchicago.org/resource/85ca-t3if.json?$"
start_date <- '2017-01-01' #format(input$crashdate[1])
end_date <- '2020-07-17' #format(input$crashdate[2])
date <- paste0("crash_date between ","'",start_date,"'"," and ","'",end_date,"'")
type <- paste0("first_crash_type == 'PEDESTRIAN' OR first_crash_type == 'PEDALCYCLIST'") #,input$crashtype,"'")
query <- paste0(url,"where=",date," AND ",type)
crashes <- read.socrata(query, app_token = Sys.getenv("APP_TOKEN"))
# Fix Lat/Long for use with Leaflet
crashes$latitude = as.numeric(crashes$latitude)
crashes$longitude = as.numeric(crashes$longitude)
# Eliminate non-Chicago or missing lat/long points
crashes <- crashes %>%
select(-c(location.coordinates)) %>%
filter(latitude > 35 & longitude < -85)
write.csv(crashes,crashes_cached)
crashes_cached <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d_%H%M%S"))
write.csv(crashes,crashes_cached)
list.files
list.files()
list.files("cache")
grepl
?grepl
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d_*")
files_list <- list.files("cache",search_string) # search for a cache file from today
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d_*")
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d","_*")
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d","_*")
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d"),"_*")
search_string <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d"),"_*")
files_list <- list.files("cache",search_string)
search_string <- paste0("crashes_",format(Sys.time(), "%Y-%m-%d"),"_*")
files_list <- list.files("cache",search_string)
max(files_list)
list.files("cache","today")
is.empty(list.files("cache","today"))
is.null(list.files("cache","today"))
is.na(list.files("cache","today"))
is.list(list.files("cache","today"))
is.list(list.files("cache","crashes_"))
is.character(list.files("cache","crashes_"))
length(list.files("cache","crashes_"))
length(list.files("cache","today"))
update_crashes <- function(){
crashes_cached <- paste0("./cache/crashes_",format(Sys.time(), "%Y-%m-%d_%H%M%S"))
url <-   "https://data.cityofchicago.org/resource/85ca-t3if.json?$"
start_date <- '2017-01-01' #format(input$crashdate[1])
end_date <- '2020-07-17' #format(input$crashdate[2])
date <- paste0("crash_date between ","'",start_date,"'"," and ","'",end_date,"'")
type <- paste0("first_crash_type == 'PEDESTRIAN' OR first_crash_type == 'PEDALCYCLIST'") #,input$crashtype,"'")
query <- paste0(url,"where=",date," AND ",type)
crashes <- read.socrata(query, app_token = Sys.getenv("APP_TOKEN"))
# Fix Lat/Long for use with Leaflet
crashes$latitude = as.numeric(crashes$latitude)
crashes$longitude = as.numeric(crashes$longitude)
# Eliminate non-Chicago or missing lat/long points
crashes <- crashes %>%
select(-c(location.coordinates)) %>%
filter(latitude > 35 & longitude < -85)
write.csv(crashes,crashes_cached)
return(crashes)
}
search_string <- paste0("crashes_",format(Sys.time(), "%Y-%m-%d"),"_*")
files_list <- list.files("cache",search_string) # search for a cache file from today
if (length(files_list) > 0) {
crashes <- read.csv(paste0("cache/",max(files_list))) # get latest cached version
} else {
# no cached files
crashes <- update_crashes()
}
runApp()
crashes %>%
filter(as.POSIXct(crash_date) > start_date)
filter(as.POSIXct(crash_date) > start_date & as.POSIXct(crash_date) < end_date)
filter(end_date > as.POSIXct(crash_date) > start_date)
runApp()
??make_EPSG
library(sp)
crashes <- SpatialPoints(crashes)
coords <- crashes %>% select(longitude,latitude)
crashes <- SpatialPoints(coords, data=crashes)
typeof(crashes)
plot(crashes)
crashes <- SpatialPoints(coords, crashes)
crashes[c("latitude"),]
crashes[,c("latitude")]
crashes[,c("latitude","longitude")]
?SpatialPointsDataFrame
crashes <- SpatialPointsDataFrame(crashes[,c("latitude","longitude")], crashes,proj4string = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
crashes <- update_crashes()
crashes <- SpatialPointsDataFrame(crashes[,c("latitude","longitude")], crashes,proj4string = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
?crs
?SpatialPointsDataFrame
crashes <- SpatialPointsDataFrame(crashes[,c("latitude","longitude")], crashes,proj4string = CRS("+proj=longlat +datum=WGS84"))
commareas <- geojsonio::geojson_read("geo/commareas.geojson", what = "sp")
wards <- geojsonio::geojson_read("geo/wards2015.geojson", what = "sp")
crashes[wards,]
CRS(wards)
CRS(wards)
crs(wards)
wards
crashes
crashes[wards,]
wards[crashes,]
crashes[wards,]
proj4string(crashes) <- CRS.new
projection(wards)
plot(crashes)
plot(wards)
plot(wards, crashes)
points(crashes)
plot(crashes)
head(crashes$coods)
head(crashes$coords)
head(crashes$latitude)
head(crashes$longitude)
leaflet(crashes)
f <- leaflet() %>%
addProviderTiles() %>%
addPolygons(wards)%>%
addCircleMarkers(crashes)
f <- leaflet() %>%
addTiles() %>%
addPolygons(wards)%>%
addCircleMarkers(crashes)
f <- leaflet() %>%
addTiles() %>%
addPolygons(data=wards)%>%
addCircleMarkers(data=crashes)
View(wards)
View(wards)
f <- leaflet() %>%
addTiles() %>%
addPolygons(data=wards)
f
f + addCircleMarkers(data=crashes)
f <- leaflet() %>%
addTiles() %>%
addPolygons(data=wards) %>%
addCircleMarkers(data=crashes)
f
f <- leaflet() %>%
addCircleMarkers(data=crashes)
f
rm crashes
rm(crashes)
rm(f)
rm(coords)
crashes <- read.csv(paste0("cache/",max(files_list))) # get latest cached version
crashes2 <- SpatialPointsDataFrame(data=crashes, proj4string = CRS("+proj=longlat +datum=WGS84"))
crashes2 <- SpatialPointsDataFrame(crashes[,c("longitude","latitude")], data=crashes, proj4string = CRS("+proj=longlat +datum=WGS84"))
plot(crashes2)
crashes[wards,]
crashes[wards$ward,]
library(sf)
st_as_sf(crashes2)
crashes3 <- st_as_sf(crashes2)
wards3 <- st_as_sf(wards)
crashes_to_wards <- st_intersects(crashes3,wards3)
crashes_to_wards <- st_intersection(crashes3,wards3)
f <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data=crashes_to_wards,fillColor = ward)
addCircleMarkers(data=crashes_to_wards,fillColor = ~ward)
f <- leaflet() %>%
addCircleMarkers(data=crashes_to_wards)
f
crashes2 <- st_as_sf(crashes, coords = c("longitude","latitude"))
st_crs(crashes2)
st_crs(crashes2) <- epsg(4326)
st_set_crs(crashes2, 4326)
rm(crashes3)
rm(crashes_to_wards)
rm(f)
rm(wards3)
wards <- geojsonio::geojson_read("geo/wards2015.geojson", what = "sf")
commareas <- st_as_sfc(geojsonio::geojson_read("geo/wards2015.geojson"))
wards <- geojsonio::geojson_read("geo/wards2015.geojson")
wards <- st_as_sfc(wards)
wards <- st_as_sf(wards)
wards <- read_sf("geo/wards2015.geojson")
commareas <- read_sf("geo/commareas.geojson")
wards <- read_sf("geo/wards2015.geojson")
bikeroutes <- read_sf("geo/bikeroutes.geojson")
?st_within
bikeroutes_intersect <- bikeroutes %>%
mutate(crashes_100 = st_within(crashes2,dist=100))
st_within(bikeroutes,crashes2,dist=100)
st_is_within_distance(bikeroutes,crashes2,dist=100)
st_crs(bikeroutes)
st_crs(crashes2)
st_set_crs(crashes2, 4326)
crashes2 <- st_set_crs(crashes2, 4326)
st_is_within_distance(bikeroutes,crashes2,dist=100)
crashes %>%
group_by(most_severe_injury,year) %>%
summarize(total = n())%>%
spread(year,total,fill=NA,convert=FALSE)
crashes %>%
mutate(year = format(crash_date,"%Y")) %>%
group_by(most_severe_injury,year) %>%
summarize(total = n())%>%
spread(year,total,fill=NA,convert=FALSE)
crashes %>%
mutate(year = format(as.character(crash_date),"%Y")) %>%
group_by(most_severe_injury,year) %>%
summarize(total = n())%>%
spread(year,total,fill=NA,convert=FALSE)
max(crashes$num_units)
max(crashes$injuries_total)
max(crashes$injuries_fatal)
head(crashes[which(injuries_fatal == 2),])
head(crashes[which(crashes$injuries_fatal > 1),])
head(crashes[,which(crashes$injuries_fatal > 1)])
head(crashes[which(crashes$injuries_fatal > 1),])
runApp()
runApp()
runApp()
map_bbox
?st_as_sfc
runApp()
map_bbox
runApp()
runApp()
st_within(crashes2[1:5],map_bbox)
st_crs(map_bbox)
runApp()
st_crs(map_bbox)
runApp()
st_crs(map_bbox)
input$map_bounds$north
runApp()
runApp()
st_crs(map_bbox)
runApp()
st_crs(map_bbox)
?st_bbox
runApp()
st_crs(map_bbox)
runApp()
?st_within
runApp()
runApp()
head(crash_df)
typeof(crash_df)
runApp()
crash_data()
typeof(crash_data())
runApp()
runApp()
runApp()
typeof(crashes)
typeof(crashes2)
class(crashes)
class(crashes2)
runApp()
runApp()
class(crash_df)
runApp()
class(crash_df)
runApp()
runApp()
runApp()
crashes3
runApp()
runApp()
crashes3
max(crashes3)
crashes3[1]
crashes3[2]
crashes3[[1]]
crashes3[[]]
crashes3[]
runApp()
?apply
runApp()
caintersect
runApp()
runApp()
caintersect
runApp()
runApp()
caintersect
runApp()
caintersect
runApp()
runApp()
caintersect
runApp()
runApp()
head(crash_in_ca)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(crashes2)
runApp()
?saveRDS
runApp()
runApp()
runApp()
runApp()
?labelFormat
runApp()
runApp()
sample(levels(crashes$most_severe_injury))
crashes$most_severe_injury <- factor(as.character(crashes$most_severe_injury),
levels = c("FATAL","INCAPACITATING INJURY","NONINCAPACITATING INJURY","REPORTED, NOT EVIDENT","NO INDICATION OF INJURY"))
runApp()
?arrange
runApp()
summary(visible_crashes()$most_severe_injury)
runApp()
runApp()
runApp()
runApp()
runApp()
severity_order
class(severity_order)
runApp()
runApp()
install.packages('DiagrammeR')
library(DiagrammeR)
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
# Chunk 1
library(DiagrammeR)
DiagrammeR::grViz("crash_tables.gv")
# Chunk 2
# Chunk 3
library(DiagrammeR)
DiagrammeR::grViz("crash_tables.gv")
library(DiagrammeR)
DiagrammeR::grViz("meta/crash_tables.gv")
library(DiagrammeR)
plot <- DiagrammeR::grViz("meta/crash_tables.gv")
plot
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
DiagrammeR::grViz("meta/crash_tables.gv")
library(DiagrammeR)
plot <- DiagrammeR::grViz("meta/crash_tables.gv")
plot2 <- DiagrammeR::grViz("meta/crash_example.gv")
plot <- DiagrammeR::grViz("meta/crash_tables.gv")
# Chunk 1: setup
library(DiagrammeR)
# Chunk 2
DiagrammeR::grViz("meta/crash_tables.gv")
# Chunk 3
DiagrammeR::grViz("meta/crash_example.gv")
# Chunk 4
# Chunk 5
# Chunk 1: setup
library(DiagrammeR)
# Chunk 2
DiagrammeR::grViz("meta/crash_tables.gv")
# Chunk 3
DiagrammeR::grViz("meta/crash_example.gv")
# Chunk 4
# Chunk 5
people_meta <- read.socrata("https://data.cityofchicago.org/api/views/u6pd-qa9d.json")
library(jsonlite)
people_meta <- fromJSON("https://data.cityofchicago.org/api/views/u6pd-qa9d.json")
head(people_meta$columns)
library(dplyr)
# Data Portal metadata for People table
people_meta <- fromJSON("https://data.cityofchicago.org/api/views/u6pd-qa9d.json")
people_columns <- people_meta$columns %>%
select(fieldName,dataTypeName,description)
kable(people_columns)
# get columns
library(knitr)
# Data Portal metadata for People table
people_meta <- fromJSON("https://data.cityofchicago.org/api/views/u6pd-qa9d.json")
people_columns <- people_meta$columns %>%
select(fieldName,dataTypeName,description)
kable(people_columns)
# get columns
View(people_meta)
View(people_columns)
library(pander)
install.packages('pander')
library(pander)
# Data Portal metadata for People table
crashes_meta <- fromJSON("https://data.cityofchicago.org/api/views/85ca-t3if.json")
crashes_columns <- crashes_meta$columns %>%
select("Field" = fieldName, "Type" = dataTypeName, "Description" = description)
pander(crashes_columns, justify = c('left', 'left', 'left'), table.split.table = 150)
runApp()
as.doc(a(href="meta.html#data-dictionary", "Data Dictionary"))
as.character(a(href="meta.html#data-dictionary", "Data Dictionary"))
is.character(a(href="meta.html#data-dictionary", "Data Dictionary"))
is.character(a(href="meta.html", "Data Dictionary"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h3("About"),
p(a(href="meta.html","Learn more about the crash data")),
p("Columns are defined in the ",
a(href="meta.html#data-dictionary","Data Dictionary"),
" using information from the city."),
p(a(href="https://github.com/mmmccarthy/chivz","View the Code on GitHub"))
test <- h3("About"),
p(a(href="meta.html","Learn more about the crash data")),
p("Columns are defined in the ",
a(href="meta.html#data-dictionary","Data Dictionary"),
" using information from the city."),
p(a(href="https://github.com/mmmccarthy/chivz","View the Code on GitHub"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(as.character(ui))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
commarea_crashes <- crashes %>%
count(commarea,most_severe_injury)
runApp()
runApp('app copy.R')
class(crashes)
head(crashes$points)
head(crashes$ca)
runApp('app copy.R')
crashes$ca
runApp('app copy.R')
runApp('app copy.R')
head(test)
runApp('app copy.R')
head(crashes$ca)
runApp('app copy.R')
runApp('app copy.R')
head(crashes$ca)
runApp('app copy.R')
head(crashes$ca)
runApp('app copy.R')
head(crashes$ca)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
head(crashes$ca)
head(commareas)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
head(crash_ca())
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
head(crash_ca())
runApp('app copy.R')
head(crash_ca())
runApp('app copy.R')
runApp('app copy.R')
head(crash_ca())
runApp('app copy.R')
head(crash_ca())
runApp('app copy.R')
update.packages()
runApp('app copy.R')
